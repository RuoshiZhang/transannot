# https://aka.ms/yaml

trigger:
  - main

variables:
    regression: 1

jobs:
  - job: build_ubuntu_userguide
    displayName: Ubuntu Userguide
    pool:
      vmImage: 'Ubuntu-20.04'
    timeoutInMinutes: 120
    strategy:
      matrix:
        avx2:
          SIMD: 'AVX2'
          STATIC: 1
          MPI: 0
          BUILD_TYPE: RelWithDebInfo
        sse41:
          SIMD: 'SSE4_1'
          STATIC: 1
          MPI: 0
          BUILD_TYPE: RelWithDebInfo
        sse2:
          SIMD: 'SSE2'
          STATIC: 1
          MPI: 0
          BUILD_TYPE: RelWithDebInfo
        avx2_mpi:
          SIMD: 'AVX2'
          STATIC: 0
          MPI: 1
          BUILD_TYPE: RelWithDebInfo
        asan:
          SIMD: 'AVX2'
          STATIC: 0
          MPI: 0
          BUILD_TYPE: ASanOpt
    steps:
      - checkout: self
      - script: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y g++-10
        condition: eq(variables['BUILD_TYPE'], 'ASanOpt')
        displayName: Install newer GCC
      - script: |
          sudo apt-get update
          sudo apt-get -y install mpi-default-dev mpi-default-bin
        displayName: Install Dependencies
        condition: eq(variables['MPI'], 1)
      - script: |
          mkdir build && cd build
          if [ "${BUILD_TYPE}" = "ASanOpt" ]; then
              export CC=gcc-10 ; export CXX=g++-10
          fi
          if [ "${STATIC}" -eq "1" ]; then
              cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=OFF \
                -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
                -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          else
              cmake -DHAVE_SANITIZER=1 -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          fi

          make -j $(nproc --all)
        displayName: Build TransAnnot
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          chmod +rwx ./util/run_regression.sh
          ./util/run_regression.sh ./build/src/transannot examples EVAL
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        condition: eq(variables['STATIC'], 1)
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/src/transannot
          artifactName: transannot-linux-$(SIMD)

  - job: build_ubuntu_cross
    displayName: Ubuntu Cross-Compile
    pool:
      vmImage: 'Ubuntu-20.04'
    strategy:
      matrix:
        power8:
          SIMD: POWER8
          ARCH: ppc64el
          CPREF: powerpc64le
        power9:
          SIMD: POWER9
          ARCH: ppc64el
          CPREF: powerpc64le
        arm64:
          SIMD: ARM8
          ARCH: arm64
          CPREF: aarch64
    steps:
      - script: |
          sudo dpkg --add-architecture $ARCH
          cat << HEREDOC | sudo tee /etc/apt/sources.list
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal-updates main universe multiverse
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal-backports main universe multiverse
          deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu/ focal-security main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal main  universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-backports main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-security main universe multiverse
          HEREDOC
          sudo apt-get update
          sudo apt-get -y install -o APT::Immediate-Configure=false crossbuild-essential-$ARCH zlib1g-dev:$ARCH libbz2-dev:$ARCH
        displayName: Install Toolchain
      - script: |
          mkdir build && cd build
          CC=${CPREF}-linux-gnu-gcc CXX=${CPREF}-linux-gnu-g++ \
           cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DHAVE_TESTS=1 \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
            -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 ..
          make -j $(nproc --all)
        displayName: Build TransAnnot
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/src/transannot
          artifactName: transannot-linux-$(SIMD)
  
  - job: build_macos
    displayName: macOS
    pool:
      vmImage: 'macos-11'
    steps:
      - checkout: self
      - script: |
          sudo xcode-select -s "/Applications/Xcode_12.2.app"
        displayName: Use Xcode 12.2
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./lib/mmseqs/util/build_osx.sh . build transannot
        displayName: Build TransAnnot
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          chmod +rwx ./util/run_regression.sh
          ./util/run_regression.sh ./build/transannot examples EVAL
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/transannot
          artifactName: transannot-darwin-universal

  - job: build_windows
    displayName: Windows
    pool:
      vmImage: 'windows-2019'
    variables:
      CYGWIN_ROOT: $(System.Workfolder)\cygwin
      CYGWIN_MIRROR: http://cygwin.mirror.constant.com
    timeoutInMinutes: 120
    steps:
      - powershell: git config --global core.autocrlf false
        displayName: core.autocrlf false
      - checkout: self
        submodules: true
      - script: |
          rmdir /s /q C:\Strawberry
        displayName: Remove Strawberry Perl (Conflict with Cygwin)
      - script: |
          choco install cygwin --params="/InstallDir:%CYGWIN_ROOT%"
        displayName: Install Cygwin
      - script: |
          %CYGWIN_ROOT%\cygwinsetup.exe -qnNdO -R "%CYGWIN_ROOT%" -s "%CYGWIN_MIRROR%" -g -P ^
          bash,^
          xxd,^
          cmake,^
          make,^
          gcc-core,^
          gcc-g++,^
          zlib-devel,^
          libbz2-devel,^
          busybox-standalone,^
          git,^
          binutils,^
          wget
        displayName: Install Dependencies
      - script: |
          %CYGWIN_ROOT%\bin\bash.exe -cl "${BUILD_SOURCESDIRECTORY}/util/build_windows.sh $(cygpath ${BUILD_SOURCESDIRECTORY}) $(cygpath ${BUILD_SOURCESDIRECTORY}/build)"
        displayName: Build TransAnnot
      - task: "ArchiveFiles@2"
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)\build\transannot
          archiveFile: $(Build.SourcesDirectory)\transannot-win64.zip
          includeRootFolder: true
          archiveType: zip
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)\transannot-win64.zip
          artifactName: transannot-win64
      # - script: |
      #     %BUILD_SOURCESDIRECTORY%\build\transannot\transannot.bat version
      #   displayName: Setup Busybox
      - script: |
          %CYGWIN_ROOT%\bin\bash.exe -cl "${BUILD_SOURCESDIRECTORY}/util/regression/run_regression.sh $(cygpath ${BUILD_SOURCESDIRECTORY}/build/build_sse41/src/transannot.exe) $(cygpath ${BUILD_SOURCESDIRECTORY}/regression)"
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)

  - job: build_ubuntu
      displayName: Ubuntu TransAnnot
      pool:
        vmImage: 'Ubuntu-20.04'
      timeoutInMinutes: 120
      strategy:
        matrix:
          avx2:
            SIMD: 'AVX2'
            STATIC: 1
            MPI: 0
            BUILD_TYPE: RelWithDebInfo
          sse41:
            SIMD: 'SSE4_1'
            STATIC: 1
            MPI: 0
            BUILD_TYPE: RelWithDebInfo
          sse2:
            SIMD: 'SSE2'
            STATIC: 1
            MPI: 0
            BUILD_TYPE: RelWithDebInfo
          avx2_mpi:
            SIMD: 'AVX2'
            STATIC: 0
            MPI: 1
            BUILD_TYPE: RelWithDebInfo
          asan:
            SIMD: 'AVX2'
            STATIC: 0
            MPI: 0
            BUILD_TYPE: ASanOpt

      steps:
        - checkout: self
          submodules: true
        - script: |
            #sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            #sudo apt-get update
            sudo apt-get install -y g++-10
          condition: eq(variables['BUILD_TYPE'], 'ASanOpt')
          displayName: Install newer G++
        - script: |
            sudo apt-get update
            sudo apt-get -y install mpi-default-dev mpi-default-bin
          displayName: Install Dependencies
          condition: eq(variables['MPI'], 1)
        - script: |
            mkdir build && cd build
            if [ "${BUILD_TYPE}" = "ASanOpt" ]; then
                export CC=gcc-10 ; export CXX=g++-10
            fi
            if [ "${STATIC}" -eq "1" ]; then
                cmake -DHAVE_SANITIZER=1 -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DHAVE_TESTS=1 \
                  -DBUILD_SHARED_LIBS=OFF \
                  -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
                  -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
                  -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
            else
                cmake -DHAVE_SANITIZER=1 -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DHAVE_TESTS=1 \
                  -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
            fi

            make -j $(nproc --all)
          displayName: Build TransAnnot
        - script: |
            export TTY=0
            if [ "${BUILD_TYPE}" = "ASan" ]; then
              echo "leak:libgomp1" > ${BUILD_SOURCESDIRECTORY}/ASan.supp
              export ASAN_OPTIONS=suppressions=${BUILD_SOURCESDIRECTORY}/ASan.supp
            fi
            ${BUILD_SOURCESDIRECTORY}/util/regression/run_regression.sh ${BUILD_SOURCESDIRECTORY}/build/src/transannot ${BUILD_SOURCESDIRECTORY}/regression
          displayName: Run Regression Suite
          condition: eq(variables['regression'], 1)
        - task: PublishPipelineArtifact@0
          condition: eq(variables['STATIC'], 1)
          inputs:
            targetPath: $(Build.SourcesDirectory)/build/src/transannot
            artifactName: transannot-linux-$(SIMD)


  - job: upload_artifacts
    displayName: Upload Artifacts
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'Ubuntu-latest'
    dependsOn:
      - build_macos
      - build_ubuntu_userguide
      - build_ubuntu_cross
      - build_ubuntu
      - build_windows
    steps:
      - script: |
          cd "${BUILD_SOURCESDIRECTORY}"
          mkdir transannot
          cp -f README.md LICENCE.md transannot
          mkdir transannot/bin
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-darwin-universal
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-osx-universal.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-SSE2
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-sse2.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-SSE4_1
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-sse41.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-AVX2
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-avx2.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-ARM8
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-arm64.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-POWER8
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-ppc64le-POWER8.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: transannot-linux-POWER9
          targetPath: $(Build.SourcesDirectory)/transannot/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/transannot/bin/transannot"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/transannot
          archiveFile: $(Build.SourcesDirectory)/transannot-linux-ppc64le-POWER9.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadSecureFile@1
        inputs:
          secureFile: azure_upload_transannot
        displayName: Get Deployment Key
      - script: |
          mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa uniclust.mmseqs.com >> ~/.ssh/known_hosts
          cd "${BUILD_SOURCESDIRECTORY}"
          ssh codeship@uniclust.mmseqs.com "mkdir -p \"/home/mirdita/repositories/mmseqs-webserver/archive/${BUILD_SOURCEVERSION}\""
          scp transannot-osx-universal.tar.gz transannot-linux-sse2.tar.gz transannot-linux-sse41.tar.gz transannot-linux-avx2.tar.gz transannot-linux-arm64.tar.gz transannot-linux-ppc64le-POWER8.tar.gz transannot-linux-ppc64le-POWER9.tar.gz codeship@uniclust.mmseqs.com:"/home/mirdita/repositories/mmseqs-webserver/archive/${BUILD_SOURCEVERSION}"
          ssh codeship@uniclust.mmseqs.com "update-latest-transannot.sh \"${BUILD_SOURCEVERSION}\""
